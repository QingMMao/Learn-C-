以通用的方式描述数据类型，而没有引入语言或实现细节。
下例是使用堆栈：

头文件：
#ifndef STACK_H_INCLUDED
#define STACK_H_INCLUDED

typedef unsigned long Item;

class Stack
{
private:
    enum {MAX=10};
    Item items[MAX];
    int top;

public:
    Stack();
    bool isempty()const;
    bool isfull()const;
    bool push(const Item & item);
    bool pop(Item & item);
};

#endif // STACK_H_INCLUDED

函数申明：
#include<iostream>
#include"stack.h"

Stack::Stack()
{
    top = 0;
}

bool Stack::isempty()const
{
    return top==0;
}

bool Stack::isfull()const
{
    return top==MAX;
}

bool Stack::push(const Item & item)
{
    if(top<MAX)
    {
        items[top++] = item;
        return  true;
    }
    else
    {
        return false;
    }
}

bool Stack::pop(Item & item)
{
    if(top>0)
    {
        item = items[--top];
        return true;
    }
    else
    {
        return false;
    }
}

调用类：
#include <iostream>
#include<cctype>
#include"stack.h"

using namespace std;

int main()
{
    Stack st;
    char ch;
    unsigned long po;

    cout<<"Enter A to add a purchase order.\n"<<"P to process a PO, or Q to quit.\n";
    while (cin>>ch && toupper(ch)!='Q')
    {
        while (cin.get()!='\n')
            continue;
        if (!isalpha(ch))
        {
            cout<<'\a';
            continue;
        }
        switch(ch)
        {
        case 'A':
        case 'a':
            cout<<"Enter a PQ number to add: ";
            cin>>po;
            if (st.isfull())
            {
                cout<<"Stack already full.\n";
            }
            else
            {
                st.push(po);
            }
            break;
        case 'P':
        case 'p':
            if (st.isempty())
            {
                cout<<"Stack already empty.\n";
            }
            else
            {
                st.pop(po);
                cout<<"PO # "<<po<<" popped.\n";
            }
            break;
        }
        cout<<"Enter A to add a purchase order.\n"<<"P to process a PO, or Q to quit.\n";
    }
    cout<<"Bye.\n";
    return 0;

}
