大型程序一般由多个源代码文件组成，这些文件可能会共享一些数据。单独编译这些文件，然后将它们链接成可执行的程序。如果只修改了一个文件，那么就可以只重新编译
该文件，然后将它与其他文件的编译版本链接。

头文件：包含结构申明和使用这些结构的函数原型。函数原型、使用#define或const定义的符号常量、结构申明、类申明、模板申明、内联函数。
#ifndef
#define
contents
#endif
源代码文件：包含与结构相关的函数代码。
源代码文件：包含调用与结构相关的函数代码。

一个例子：
创建新的头文件coordin.h
#ifndef COORDIN_H_INCLUDED
#define COORDIN_H_INCLUDED
struct polar
{
    double distance;
    double angle;
};

struct rect
{
    double x;
    double y;
};

polar rect_to_polar(rect xypos);
void show_polar(polar dapos);


#endif // COORDIN_H_INCLUDED

创建main.cpp
#include<iostream>
#include"coordin.h"
using namespace std;

int main()
{
    rect rplace;
    polar pplace;

    cout<<"Enter the x and y values:\n";
    while(cin>>rplace.x>>rplace.y)
    {
        pplace = rect_to_polar(rplace);
        show_polar(pplace);
        cout<<"Enter next x and y values:(q to quit)\n";
    }

    return 0;
}

创建函数原型文件：
#include<iostream>
#include<cmath>
using namespace std;

struct polar
{
    double distance;
    double angle;
};

struct rect
{
    double x;
    double y;
};

polar rect_to_polar(rect xypos);
void show_polar(polar dapos);

polar rect_to_polar(rect xypos)
{
    polar answer;
    answer.distance = sqrt(xypos.x*xypos.x+xypos.y*xypos.y);
    answer.angle = atan2(xypos.y,xypos.x);
    return answer;
}

void show_polar(polar dapos)
{
    const double Rad_to_deg = 57.296;

    cout<<"Distance: "<<dapos.distance<<endl;
    cout<<"Angle: "<<dapos.angle*Rad_to_deg;
}

