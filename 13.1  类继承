1.基类，派生类。
2.派生类继承了基类的数据和数据操作方法，公有派生：基类的公有成员成为派生类的公有成员，不能直接访问私有成员，必须通过基类方法进行访问。
3.三种继承方式：公有继承、保护继承和私有继承。常用的是公有继承
4.多态公有继承：同一个方法在派生类和基类中的行为不同：在派生类中重新定义基类的方法；使用虚方法。
5.以银行账户为例

创建头文件：
#ifndef BRASS_H_INCLUDED
#define BRASS_H_INCLUDED

class Brass
{
private:
    enum {MAX=35};
    char fullname[MAX]; //名字
    long accountNum;    //
    double balance;     //余额
public:
    Brass(const char *s="Nobody",long an=-1,double bal=0.0);
    void Deposit(double amount);    //存款
    //virtual：在基类中将派生类会重新定义的方法生命为虚方法
    virtual void Withdraw(double amount);    //取款
    double Balance()const;  //显示余额
    virtual void ViewAccount()const;
    virtual ~Brass(){};     //虚析构函数，不执行任何操作
};

class BrassPlus:public Brass
{
private:
    //添加三个私有成员
    double MaxLoan;     //透支上限
    double rate;    //利率
    double owesBank;    //欠款
public:
    BrassPlus(const char*s="Nobody",long an=-1,double bal=0.0,double ml=500,double r=0.10);
    BrassPlus(const Brass & ba,double ml=500,double r=0.1);
    virtual void ViewAccount()const;
    //添加三个公有成员
    virtual void Withdraw(double amount);
    void ResetMax(double m){MaxLoan=m;}
    void ResetRate(double r){rate=r;}
    void ResetOwes(){owesBank=0;}
};



#endif // BRASS_H_INCLUDED

函数原型文件：
#include<iostream>
#include<cstring>
#include"brass.h"

using namespace std;

Brass::Brass(const char*s,long an,double bal)
{
    strncpy(fullname,s,MAX-1);
    fullname[MAX-1] = '\0';
    accountNum = an;
    balance = bal;
}

void Brass::Deposit(double amount)
{
    if (amount<0)
    {
        cout<<"Negative deposit not allowed, deposit is cancelled.\n";
    }
    else
    {
        balance += amount;
    }
}

void Brass::Withdraw(double amount)
{
    if (amount<0)
    {
        cout<<"Withdraw amount must be positive, withdraw canceled.\n";
    }
    else if(amount<=balance)
    {
        balance -= amount;
    }
    else
    {
        cout<<"Withdraw amount exceeds your balance, withdraw canceled.\n";
    }
}

double Brass::Balance()const
{
    return balance;
}

void Brass::ViewAccount()const
{
    cout<<"Client: "<<fullname<<endl;
    cout<<"Account Number: "<<accountNum<<endl;
    cout<<"Balance: $"<<balance<<endl;
}



//派生类构造函数
BrassPlus::BrassPlus(const char*s,long an,double bal,double ml,double r):Brass(s,an,bal)
{
    MaxLoan = ml;
    owesBank = 0.0;
    rate = r;
}

BrassPlus::BrassPlus(const Brass & ba,double ml,double r):Brass(ba)
{
    MaxLoan = ml;
    owesBank = 0.0;
    rate = r;
}

void BrassPlus::ViewAccount()const
{
    cout<<"Maximum loan: $"<<MaxLoan<<endl;
    cout<<"Owed to bank: $"<<owesBank<<endl;
    cout<<"Loan rate: "<<100*rate<<"%\n";
}

void BrassPlus::Withdraw(double amount)
{
    double bal = Balance();
    if (amount<=bal)
    {
        Brass::Withdraw(amount);    //调用基类的公有方法
        Brass::Withdraw(amount);    //调用基类的公有方法
    }
    else if(amount<=bal+MaxLoan-owesBank)
    {
        double advance=amount-bal;
        owesBank += advance*(1.0+rate);
        cout<<"Bank advance: $"<<advance<<endl;
        cout<<"Finance charge: $"<<advance*rate<<endl;
        Deposit(advance);
        Brass::Withdraw(amount);
    }
    else
    {
        cout<<"Credit limit exceeded.Transaction canceled.\n";
    }
}


主函数：
#include <iostream>
#include"brass.h"

using namespace std;

int main()
{
    Brass Piggy("Piggy",920672,3000.00);
    BrassPlus Hoggy("Hoggy",78536,3000.00);

    Piggy.ViewAccount();
    cout<<endl;

    Hoggy.ViewAccount();
    cout<<endl;

    cout<<"Depositing $1000 into the Hoggy Account:\n";
    Hoggy.Deposit(1000.00);
    cout<<"New balance: "<<Hoggy.Balance()<<endl;

    cout<<"Withdrawing $4200 from the Piggy Account:\n";
    Piggy.Withdraw(4200.00);
    cout<<"Piggy account balance: "<<Piggy.Balance()<<endl;

    cout<<"Withdrawing $4200 from the Hoggy Account:\n";
    Hoggy.Withdraw(4200.00);
    Hoggy.ViewAccount();

    return 0;
}

用虚函数，根据引用或者指针指向的对象类型来选择具体方法：
#include <iostream>
#include"brass.h"
const int CLINES = 2;
const int LEN = 40;

using namespace std;

int main()
{
    Brass *p_clients[CLINES];
    int i;
    for(i=0;i<CLINES;i++)
    {
        char temp[LEN];
        long tempnum;
        double tempbal;
        char kind;
        cout<<"Enter client's name: ";
        cin.getline(temp,LEN);
        cout<<"Enter clients account number: ";
        cin>>tempnum;
        cout<<"Enter opening balance: $";
        cin>>tempbal;
        cout<<"Enter 1 for Brass Account or 2 for BrassPlus Account: ";
        while (cin>>kind&&(kind!='1' && kind!='2'))
        {
            cout<<"Enter 1 or 2: ";
        }
        if (kind=='1')
        {
            p_clients[i] = new Brass(temp,tempnum,tempbal);
        }
        else
        {
            double tmax,trate;
            cout<<"Enter the overdraft limit: $";
            cin>>tmax;
            cout<<"Enter the interest rate as a decimal fraction: ";
            cin>>trate;
            p_clients[i] = new BrassPlus(temp,tempnum,tempbal,tmax,trate);
        }
        while (cin.get()!='\n')
        {
            continue;
        }
    }
    cout<<endl;
    for (i=0;i<CLINES;i++)
    {
        p_clients[i]->ViewAccount();
        cout<<endl;
    }
    for (i=0;i<CLINES;i++)
    {
        delete p_clients[i];
    }

    return 0;
}


